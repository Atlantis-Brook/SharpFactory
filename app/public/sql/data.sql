-- --------------------------------------------------------
-- 主机:                           127.0.0.1
-- Server version:               8.0.15 - MySQL Community Server - GPL
-- Server OS:                    Win64
-- HeidiSQL 版本:                  10.1.0.5464
-- --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET NAMES utf8 */;
/*!50503 SET NAMES utf8mb4 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- Dumping data for table sharpfactory.blog: ~11 rows (approximately)
/*!40000 ALTER TABLE `blog` DISABLE KEYS */;
INSERT INTO `blog` (`user_id`, `title`, `visits`, `markdown`, `synopsis`, `html`, `update_html`, `created_at`, `updated_all`) VALUES
	( 1001, '小案例', NULL, '## JavaScript轮播图\r\n\r\n- 思路：设定一个div作为显示框，在框内添加一个超长的ul包裹图片，把每张图片的大小设置为div显示框的大小，设置css属性使第一张图片位于div显示框内，并且给div显示框设置overflow：hidden，把其他图片全部隐藏。js设置定时器，每隔3000毫秒ul向右移动一张图片的宽度。\r\n\r\n  \r\n\r\n  先写HTML代码 :\r\n\r\n  ```html\r\n  <!DOCTYPE html>\r\n  <html lang="en">\r\n  <head>\r\n      <meta charset="UTF-8">\r\n      <title>Document</title>\r\n      <link rel="stylesheet" href="./index.css">\r\n      <script src="./index.js"></script>\r\n  </head>\r\n  <body>\r\n      <div class="lbt">\r\n          <ul style="left: 0px">\r\n              <li><img class="img1" src="./pic/pic1.jpg" alt="pic"></li>\r\n              <li><img class="img2" src="./pic/pic2.jpg" alt="pic"></li>\r\n              <li><img class="img3" src="./pic/pic3.gif" alt="pic"></li>\r\n              <li><img class="img4" src="./pic/pic4.jpg" alt="pic"></li>\r\n              <li><img class="img5" src="./pic/pic5.jpg" alt="pic"></li>\r\n          </ul>\r\n      </div>\r\n  </body>\r\n  </html>\r\n  ```\r\n\r\n  \r\n\r\ncss样式：\r\n\r\n```css\r\n*{\r\n    list-style-type: none;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n.lbt{\r\n    margin: 82px auto 0;\r\n    position: relative;\r\n    width: 800px;\r\n    height: 400px;\r\n    overflow: hidden;\r\n}\r\n\r\n\r\n.lbt ul{\r\n    position: absolute;\r\n    display: block;\r\n    top: 0;\r\n    width: 4000px;\r\n    height: 400px;\r\n}\r\n\r\n.lbt li{\r\n    float: left;\r\n    width: 800px;\r\n    height: 400px;\r\n}\r\n\r\n.lbt img{\r\n    width: 800px;\r\n    height: 400px;\r\n}\r\n```\r\n\r\n我们通过使用div显示框(.lbt) position：relative和ul的position：absolute进行定位，使轮播图的第一张图片刚好位于div显示框(.lbt)上。\r\n\r\n\r\n\r\n效果如下：\r\n\r\n\r\n\r\n![p][1]\r\n\r\n\r\n\r\n接下来写JavaScript代码：\r\n\r\n```javascript\r\nvar ul = document.getElementsByTagName(\'ul\');  //获取一个元素组\r\nvar i = 0;   //用于计数\r\nsetInterval(function (){\r\n    //添加定时器Interval\r\n    if(i == 4){\r\n        //当轮播到第六张图片时，回到第一张图片\r\n        ul[0].style.left = \'0px\';\r\n        i=0;\r\n    }else{\r\n        ul[0].style.left = (parseInt(ul[0].style.left) - 800) + \'px\'; //每过3000ms执行ul向左移动一张图片的距离    \r\n    }\r\n    i++;\r\n},3000);\r\n```\r\n\r\n\r\n\r\n***\r\n\r\n##### 易混淆点：\r\n\r\n1. 当使用position来定位时，left必须写为行间样式，因为行JavaScript的***ul[0].style*** 只能获取行间样式信息，引入css样式无法查看。\r\n\r\n2. 使用setInterval()定时器，第一次执行是等待3000ms后，所以为3000ms后left = -800px，所以执行播放第二张图，在 *i++* 执行以前，i = 0。即：\r\n\r\n   **图片**			**i**\r\n\r\n   pic1				0\r\n\r\n   pic2				0\r\n\r\n   pic3				1\r\n\r\n   pic4				2\r\n\r\n   pic5				3\r\n\r\n   \r\n\r\n   所以当i==4时，已经没有pic6可供展示，直接跳回最开始的pic1。\r\n\r\n   \r\n\r\n   -- 不会接gif图片，所以没有效果图了，抱歉！--\r\n\r\n   \r\n\r\n[1]: ./1.png\r\n\r\n', NULL, NULL, NULL, '2019-04-26 20:22:23', '2019-04-29 15:25:32'),
	( 1001, 'css之position定位', NULL, '\r\n\r\n> **position: static**\r\n\r\n&nbsp; &nbsp;  默认值，标签会占据网页的一定的空间，且不会受到top，bottom，left，right等元素的影响。\r\n\r\n > **position: fixed**\r\n \r\n&nbsp; &nbsp; 标签不会占用所在网页的空间，且该标签不会随着网页滚动条的滚动而改变位置。即该标签悬浮于网页上方，不会受到网页的影响。\r\n	\r\n> **position: relative**\r\n\r\n&nbsp; &nbsp; 标签会占据网页一定的空间。标签的top，bottom，left，right等值可以定义为负值，此情况下标签会超出网页移动，超出网页的内容将被遮盖。\r\n	\r\n> **position: absolute**\r\n\r\n&nbsp; &nbsp; 标签不会占据网页的空间。此定位方式是根据父标签（包围此标签的上一级标签）或html（没有父标签的情况）定位的，标签会与网页内容重合(必须设定top、bottom、 left、right其中一个元素，否则还是会遵循文本流)。\r\n	\r\n> **position: sticky**\r\n\r\n&nbsp; &nbsp; 标签会占据网页一定的空间。 当滚动网页下移时，与position：fixed一样。top，bottom，left，right可以定义为负值，滚动后可如position：relative一样显示。如top=-10px时，网页下滑，该标签将会有10px的内容被上边框覆盖。', NULL, NULL, NULL, '2019-04-26 20:23:16', '2019-04-29 15:25:24'),
	( 1003, 'sharpfactory SQL规则文档', NULL, '# SharpFactory官网数据结构\r\n\r\n## 界面数据\r\n\r\n* 展示图片 -- VARCHAR(URL)\r\n* 文字信息 -- VARCHAR\r\n\r\n## blog数据\r\n\r\n* synopsis -- TEXT\r\n* markdown -- TEXT\r\n* html - TEXT\r\n* title -- VARCHAR\r\n* update_at -- CURRENT_TIMESTAMP\r\n* update_all -- CURRENT_TIMESTAMP\r\n* update_html -- DATETIME\r\n\r\n## 用户数据\r\n\r\n* usr -- VARCHAR\r\n* password -- BIGVARCHAR\r\n* salt -- VARCHAR\r\n* id -- INT\r\n* email -- VARCHAR\r\n* urlNavigationData -- 此为一个数据集合，具体数据类型待定\r\n\r\n## 论坛数据\r\n\r\n* id -- INT\r\n* name -- VARCHAR\r\n* ip -- BIGINT(转换)\r\n* content -- TEXT\r\n* time -- CURRENT_TIMESTAMP\r\n\r\n## 承接项目数据\r\n\r\n* content -- TEXT\r\n* id -- INT\r\n* time -- CURRENT_TIMESTAMP\r\n* phone -- BIGINT\r\n* email -- VARCHAR\r\n* readmeText -- VARCHAR(URL)\r\n\r\n## 网址导航数据\r\n\r\n* category -- VARCHAR\r\n* websiteUrl -- VARCHAR(URL)\r\n* wallpaper -- VARCHAR(URL)\r\n\r\n\r\n\r\n### 本文中尚未提及的数据类型均为待定，视实际情况而定', NULL, NULL, NULL, '2019-04-26 20:25:20', '2019-04-26 20:25:20'),
	( 1005, 'JavaScript 关于全局和局部变量', NULL, '<font color=#ff0000 face="黑体">js会提前对声明的部分做完整的分析，之后再按顺序执行代码。</font>\r\n\r\n* 例一\r\n```\r\nvar a= 100;\r\nfunction asd(){\r\n    alert(a);\r\n}\r\n\r\nasd();\r\n```\r\n结果：\r\n> 100\r\n\r\n* 例二\r\n\r\n```\r\nvar a= 100;\r\nfunction asd(){\r\n    alert(a);\r\n    var a=123;\r\n    alert(a);\r\n}\r\n\r\nasd();\r\n```\r\n结果：\r\n> undefined  123\r\n \r\n **例题说明**：在js对声明部分进行分析时，对`var a= 123；`这行代码的声明部分进行分析，判定asd()函数中有局部变量被声明，所以没有显示第一行声明的全局变量的值。\r\n \r\n```\r\nvar a= 123；\r\n```\r\n等价于：\r\n```\r\nvar a；//这句代码被提前分析\r\na= 123；这句代码没有执行\r\n```\r\n所以输出的只会等于undefined，而不是123；第二次输出才会等于123；\r\n·\r\n·\r\n·\r\n*注意：在函数中声明变量，使用var关键字声明的是局部变量，没有用的是全局变量。*', NULL, NULL, NULL, '2019-04-27 11:26:09', '2019-04-29 15:27:40'),
	( 1018, '局域网和ip', NULL, '# 局域网和IP\r\n\r\n### IPv4\r\n\r\nIPv4是由32个二进制数组成（即四段，每段八个）\r\n\r\n| 主类网          | 网络位                       | 主机位                       |\r\n| :-------------- | :--------------------------- | :--------------------------- |\r\n| A类（0~127）    | 前八位（第一段）             | 后二十四位（第二、三、四段） |\r\n| B类（128~191）  | 前十六位（第一、二段）       | 后十六位（第三、四段）       |\r\n| C类（192~223）  | 前二十四位（第一、二、三段） | 后八位（第四段）             |\r\n| D类（组播地址） | ---                          | ---                          |\r\n| D类（保留）     | ---                          | ---                          |\r\n\r\n\r\n\r\n特殊的IP地址：\r\n\r\n1. 网络位不变，主机位全为0：    表示网络地址（网段范围）             192.168.1.0\r\n2. 网络位不变，主机位全为1：    表示子网广播地址（所有主机）     192.168.1.255\r\n3. 网络位和主机位全为0：    表示默认路由/缺省路由（所有网络）    0.0.0.0\r\n4. 网络位和主机位全为1：    表示全网广播地址                                    255.255.255.255\r\n5. 网络位为127，主机地址任意：    表示换回地址                               127.0.0.1\r\n\r\n\r\n\r\n私有IP地址：（可以自己通过交换机和路由器搭局域网）\r\n\r\nA：10.0.0.0 ~ 10.255.255.255\r\n\r\nB：172.16.0.0 ~ 172.31.255.255\r\n\r\nC：192.168.0.0 ~ 192.168.255.255', NULL, NULL, NULL, '2019-04-28 22:17:45', '2019-04-28 22:17:45'),
	( 1013, 'mysql存储引擎', NULL, '首先线要了解：\r\n\r\n- 事务：事务是指单个逻辑工作单元的一系列操作，要么完全执行，要么不执行\r\n- 外键：关联两张数据表的一列数据\r\n- 文件后缀：\r\n  - .frm  存储表结构和信息（该表有多少列，每列的名字）\r\n  - .MYD  存储数据\r\n  - .MYI  存储索引\r\n\r\n\r\n\r\n存储引擎：\r\n\r\n- MyISAM：不支持事务，不支持外键，但是访问速度特别快\r\n- INNODB：提供了提交，回滚和崩溃恢复能力的事务安全，相对效率低，占内存大\r\n- MEMORY：使用内存存储数据，访问非常快，但是服务器如果关闭，数据就会丢失（只有一张空的表文件  xx.frm ）。', NULL, NULL, NULL, '2019-04-28 22:18:27', '2019-04-28 22:18:27'),
	( 1002, 'Vue Component', NULL, '## vue学习笔记 ---- component组件\r\n\r\n- 创建全局组件\r\n\r\n  ```html\r\n  <div id="myID">\r\n  	<mydiv></mydiv>\r\n  </div>\r\n  \r\n  	<script>\r\n  		// 注册\r\n  		Vue.component(\'mydiv\', {\r\n   			template: \'<div>自定义组件!</div>\'\r\n  		});\r\n  		// 创建根实例\r\n  		new Vue({\r\n    			el: \'#myID\'\r\n  		});\r\n  </script>\r\n  ```\r\n\r\n- 创建局部组件\r\n\r\n  ```html\r\n  <div id="myID">\r\n  	<runoob></runoob>\r\n  </div>\r\n  \r\n  <script>\r\n  \r\n  // 创建根实例\r\n  new Vue({\r\n    el: \'#myID\',\r\n    components: {\r\n      // <mydiv> 将只在#myID元素内可用\r\n      \'runoob\': {\r\n    		template: \'<div>自定义组件!</div>\'\r\n  	}\r\n    }\r\n  })\r\n  </script>\r\n  ```\r\n\r\n  ', NULL, NULL, NULL, '2019-04-29 15:20:10', '2019-04-29 15:20:10'),
	( 1007, 'sass学习笔记', NULL, '### WEB前端开发 ------ sass学习笔记\r\n\r\n***\r\n\r\n##### - 预处理器的功能\r\n\r\n- 可以创建变量\r\n\r\n\r\n\r\n**一、变量应用：**\r\n\r\n- 命名规则：$name: value\r\n\r\n  ```scss\r\n  $border-color: #000;  \r\n  ```\r\n\r\n- 变量引用\r\n\r\n  ```scss\r\n  $border-color: #000;\r\n  \r\n  div{\r\n      border: 1px solid $border-color;\r\n  }\r\n  ```\r\n\r\n- **注意事项**\r\n\r\n  - 在命名变量时，**_** (下划线) 和 **-** (中划线) 是一样的，没有区别，喜欢怎么用看个性\r\n\r\n  - 变量的值也可以有变量\r\n\r\n    ```scss\r\n    $background-color: #ccc;\r\n    \r\n    $border: 1px solid $background-color;\r\n    \r\n    div{\r\n        border: $border;\r\n    }\r\n    ```\r\n\r\n  - 变量可以局部创建也可以全局创建，但是局部变量只能在局部有效，全局变量则整篇内容都有效。\r\n\r\n    ```scss\r\n    #border-color: #ccc; /* 全局有效 */\r\n    \r\n    div{\r\n        $size: 2px; /* 只在div{}内有效 */\r\n        border: $size solid $border-color;\r\n    }\r\n    ```\r\n\r\n**二、嵌套css规则**\r\n\r\n- 父选择器（&）的使用\r\n\r\n  - 当我们要添加伪类:hover时，可以使用父选择器（&）\r\n\r\n    ```scss\r\n    div a{\r\n        color: #000;\r\n        &:hover{\r\n            color: #f00;\r\n        }\r\n    }\r\n    ```\r\n\r\n    父选择器指代div下的a标签，即\r\n\r\n    ```scss\r\n    div a {\r\n        color: #000;\r\n    }\r\n    \r\n    article a:hover { \r\n        color: #f00;\r\n    }\r\n    \r\n    /*\r\n    没有添加父类选择器（&）：意义为div下a标签下的所有子标签都会添加上:hover.（a和:hover之间的空格表示子选择器，稍后说明）\r\n    \r\n    div a {\r\n        color: #000;\r\n    }\r\n    \r\n    article a :hover { 		\r\n        color: #f00;   \r\n    }\r\n    */\r\n    ```\r\n\r\n- 群组选择器\r\n\r\n  - 多个标签同时对应一个css，可以通过群组选择器（,）连接，即逗号连接，表示多种情况\r\n\r\n    ```scss\r\n    .button1, .button2, .button3{\r\n        width: 45px;\r\n        height: 24px;\r\n    }\r\n    ```\r\n\r\n- 子组合选择器，同层组合选择器\r\n\r\n  - 子组合选择器\r\n\r\n    - 箭头（>）\r\n\r\n      ```scss\r\n      div>a{\r\n          /* 表示div下的 第一层标签 中所有的a标签 */\r\n          color: #000;\r\n      }\r\n      ```\r\n\r\n      \r\n\r\n    - 空格\r\n\r\n      ```scss\r\n      div a{\r\n          /* 表示div下的 所有 的a标签 */\r\n          color: #000;\r\n      }\r\n      ```\r\n\r\n  - 同层组合选择器\r\n\r\n    - 加号（+）\r\n\r\n      ```scss\r\n      div+a{\r\n          /* 表示div后相邻着的a标签 */\r\n          color: #000;\r\n      }\r\n      ```\r\n\r\n      \r\n\r\n    - ~\r\n\r\n      ```scss\r\n      div~a{\r\n          /* 表示div后的所有的a标签，不管相不相邻 */\r\n          color: #000;\r\n      }\r\n      ```\r\n\r\n- 嵌套属性\r\n\r\n  ```scss\r\n  background: {\r\n      repeat: no-repeat;\r\n      size: cover;\r\n  }\r\n  ```\r\n\r\n  相当于\r\n\r\n  ```scss\r\n  background-color: #ccc;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  ```\r\n\r\n  还可以这么写：\r\n\r\n  ```scss\r\n   border: 1px solid #ccc {\r\n    	left: 0px;\r\n    	right: 0px;\r\n    }\r\n  ```\r\n\r\n  \r\n', NULL, NULL, NULL, '2019-04-29 15:21:03', '2019-04-29 15:21:03'),
	( 1004, 'html5 新特性', NULL, '### - HTML5新特性\r\n\r\n---\r\n\r\n- **mathML**\r\n\r\n  - 是一种数学标记语言，是一种基于xml的标准，用来书写互联网上书写数学公式和符号的标志语言：\r\n\r\n    ![效果图](D:\\Myfile\\MyBlog\\mathML.png)\r\n\r\n- **拖放**\r\n\r\n  ![](D:\\Myfile\\MyBlog\\tuofang.gif)\r\n\r\n- **获取用户的定位**\r\n\r\n- **播放视频(video)**\r\n\r\n- **播放音频(audio)**\r\n\r\n- **新增了input输入类型**\r\n\r\n  - color\r\n\r\n  ![](D:\\Myfile\\MyBlog\\input输入类型.png)\r\n\r\n  - date、datetime、datetime-local、email、month、number、range、search、tel、time、url、week\r\n\r\n- **新增了表单元素**（觉得后面两个无卵用）\r\n\r\n  - datalist(*可选列表和输入提示*)、keygen(*元素的作用是提供一种验证用户的可靠方法*)、output(*用于不同类型的输出，可在表单上写oninput计算公式，实时更新计算结果*)\r\n\r\n- **新增表单（form、input）属性**\r\n\r\n  ![](D:\\Myfile\\MyBlog\\新增form-input属性.png)\r\n\r\n  - step（没截到图）\r\n\r\n- **HTML5 web 储存**\r\n\r\n  - 与cookie对比：\r\n    - cookie大小上线为4kb，web 可以存4~5M\r\n    - cookie每次http请求都携带，不安全。\r\n    - web性能比cookie高\r\n\r\n- **web SQL**\r\n\r\n- **web应用程序缓存**\r\n\r\n  - web应用可以进行缓存，在没有网络时也可以访问，带来的三个优势：\r\n    - 离线浏览 - 用户可在应用离线时使用它们\r\n    - 速度 - 已缓存资源加载得更快\r\n    - 减少服务器负载 - 浏览器将只从服务器下载更新过或更改过的资源。\r\n\r\n- **web Workers**\r\n\r\n  - web worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。您可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web worker 在后台运行。\r\n\r\n- ', NULL, NULL, NULL, '2019-04-29 15:22:12', '2019-04-29 15:22:12'),
	( 1008, '关于自加和自减', NULL, '自加和自减以前没怎么用做返回值，今天在学习ES6的Generator的时候突然意识到a++和++a的区别：\r\n\r\n```\r\nfunction* abc（）{\r\n	let a = 1;\r\n	yield a++;   \r\n}\r\n\r\nlet g = abc();\r\n \r\nconsole.log(g.next());\r\n```\r\n以上打印结果为：**1**；\r\n\r\n但是如果换成 ***yield ++a*** 的话，打印的结果是：**2**；\r\n\r\n\r\n***\r\n**总结**：++a和a++都是自加，其他地方都一样，但是当要把他们当作返回值来使用的话，略微有些许小的区别。\r\n\r\n|形式 ( a=1 )| 结果 | 返回值 |\r\n|--|--|--|\r\n| a++ | 2 | 1 |\r\n| ++a | 2 | 2 |\r\n| a- - | 0 | 1 |\r\n| - -a | 0 | 0 |', NULL, NULL, NULL, '2019-04-29 15:23:14', '2019-04-29 15:23:14'),
	( 1016, 'Url、Urn和Uri的区别', NULL, '\r\n\r\n**HTTP三次握手**\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190218212055473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY2NjMzMw==,size_16,color_FFFFFF,t_70)\r\n​&emsp;主要是为了解决服务器的开启无用的链接。通过三次握手的行为，可以确定客户端能够正常的收到服务器传来的信息，如果三次握手没有成功，则服务器会关闭当前端口，而不会一直浪费端口资源\r\n\r\n​	（如果客户端一定时间内没有收到数据，则会从新发送请求）\r\n\r\n\r\n\r\n**URI、URL和URN**\r\n&emsp;**URI** 是统一资源标识符，包含**URL**和 **URN** ，是更高层的抽象概念\r\n&emsp;**URL** 是统一资源定位器，即资源的地址；\r\n&emsp;**URN**永久统一资源定位符，无论资源怎么改变位置，都可以通过**URN**找到，目前还没有具体的使用方法\r\n\r\n&emsp;**URI**和**URL**的区别\r\n&emsp;&emsp;**URI**是**URL**的父类，是更为抽象的概念，**URL** 则是具体的某个资源；\r\n\r\n&emsp;&emsp;- 举个例子：**URI** 比作实数集，则**URL**则表示具体的1、2、3...\r\n\r\n\r\n\r\n&emsp;**URL**的格式：protocol://user:pass@host:80/path?query=string#has\r\n&emsp;&emsp;- protocol表示网络协议部分\r\n&emsp;&emsp;- user:pass表示用户名和密码（不常用）\r\n&emsp;&emsp;- host:80表示域名和端口（端口默认为80）\r\n&emsp;&emsp;- query=string表示查找参数\r\n&emsp;&emsp;- hash 资源的某一片段\r\n\r\n&emsp;&emsp;URL的每个部分的位置不能变\r\n\r\n​			', NULL, NULL, NULL, '2019-04-29 15:24:44', '2019-04-29 15:24:44');
/*!40000 ALTER TABLE `blog` ENABLE KEYS */;

-- Dumping data for table sharpfactory.forum: ~0 rows (approximately)
/*!40000 ALTER TABLE `forum` DISABLE KEYS */;
/*!40000 ALTER TABLE `forum` ENABLE KEYS */;

-- Dumping data for table sharpfactory.navigate_index: ~0 rows (approximately)
/*!40000 ALTER TABLE `navigate_index` DISABLE KEYS */;
/*!40000 ALTER TABLE `navigate_index` ENABLE KEYS */;

-- Dumping data for table sharpfactory.navigate_user: ~0 rows (approximately)
/*!40000 ALTER TABLE `navigate_user` DISABLE KEYS */;
/*!40000 ALTER TABLE `navigate_user` ENABLE KEYS */;

-- Dumping data for table sharpfactory.news: ~0 rows (approximately)
/*!40000 ALTER TABLE `news` DISABLE KEYS */;
/*!40000 ALTER TABLE `news` ENABLE KEYS */;

-- Dumping data for table sharpfactory.undertake_project: ~0 rows (approximately)
/*!40000 ALTER TABLE `undertake_project` DISABLE KEYS */;
/*!40000 ALTER TABLE `undertake_project` ENABLE KEYS */;

-- Dumping data for table sharpfactory.user: ~20 rows (approximately)
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` (`user_id`, `user`, `avatar`) VALUES
	(1001, '石秀朋', '/usr/img'),
	(1002, '朽然', '/usr/img'),
	(1003, 'vata', '/usr/img'),
	(1004, '齐帅', '/usr/img'),
	(1005, '张云鹤', '/usr/img'),
	(1006, '常田清', '/usr/img'),
	(1007, '杨金成', '/usr/img'),
	(1008, '付哲洋', '/usr/img'),
	(1009, '马化腾', '/usr/img'),
	(1010, '马云', '/usr/img'),
	(1011, '李彦宏', '/usr/img'),
	(1012, '刘强东', '/usr/img'),
	(1013, '雷军', '/usr/img'),
	(1014, '乔布斯', '/usr/img'),
	(1015, '比尔盖茨', '/usr/img'),
	(1016, '沃伦巴菲特', '/usr/img'),
	(1017, '李嘉诚', '/usr/img'),
	(1018, '王健林', '/usr/img'),
	(1019, '任正非', '/usr/img'),
	(1020, '马克扎克伯格', '/usr/img');
/*!40000 ALTER TABLE `user` ENABLE KEYS */;

-- Dumping data for table sharpfactory.user_auths: ~0 rows (approximately)
/*!40000 ALTER TABLE `user_auths` DISABLE KEYS */;
/*!40000 ALTER TABLE `user_auths` ENABLE KEYS */;

/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;
/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
